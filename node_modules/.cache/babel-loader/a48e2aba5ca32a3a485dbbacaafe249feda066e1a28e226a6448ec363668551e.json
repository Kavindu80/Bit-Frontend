{"ast":null,"code":"import { unpack, type } from '../../utils/index.js';\nimport chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport lab2rgb from './lab2rgb.js';\nimport rgb2lab from './rgb2lab.js';\nimport { getLabWhitePoint, setLabWhitePoint } from './lab-constants.js';\nColor.prototype.lab = function () {\n  return rgb2lab(this._rgb);\n};\nconst lab = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return new Color(...args, 'lab');\n};\nObject.assign(chroma, {\n  lab,\n  getLabWhitePoint,\n  setLabWhitePoint\n});\ninput.format.lab = lab2rgb;\ninput.autodetect.push({\n  p: 2,\n  test: function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    args = unpack(args, 'lab');\n    if (type(args) === 'array' && args.length === 3) {\n      return 'lab';\n    }\n  }\n});\nexport { lab, getLabWhitePoint, setLabWhitePoint };","map":{"version":3,"names":["unpack","type","chroma","Color","input","lab2rgb","rgb2lab","getLabWhitePoint","setLabWhitePoint","prototype","lab","_rgb","_len","arguments","length","args","Array","_key","Object","assign","format","autodetect","push","p","test","_len2","_key2"],"sources":["C:/Users/kavin/Desktop/Azure/Bit-Frontend/node_modules/chroma-js/src/io/lab/index.js"],"sourcesContent":["import { unpack, type } from '../../utils/index.js';\nimport chroma from '../../chroma.js';\nimport Color from '../../Color.js';\nimport input from '../input.js';\nimport lab2rgb from './lab2rgb.js';\nimport rgb2lab from './rgb2lab.js';\nimport { getLabWhitePoint, setLabWhitePoint } from './lab-constants.js';\n\nColor.prototype.lab = function () {\n    return rgb2lab(this._rgb);\n};\n\nconst lab = (...args) => new Color(...args, 'lab');\nObject.assign(chroma, { lab, getLabWhitePoint, setLabWhitePoint });\n\ninput.format.lab = lab2rgb;\n\ninput.autodetect.push({\n    p: 2,\n    test: (...args) => {\n        args = unpack(args, 'lab');\n        if (type(args) === 'array' && args.length === 3) {\n            return 'lab';\n        }\n    }\n});\n\nexport { lab, getLabWhitePoint, setLabWhitePoint };\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,IAAI,QAAQ,sBAAsB;AACnD,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,OAAO,MAAM,cAAc;AAClC,SAASC,gBAAgB,EAAEC,gBAAgB,QAAQ,oBAAoB;AAEvEL,KAAK,CAACM,SAAS,CAACC,GAAG,GAAG,YAAY;EAC9B,OAAOJ,OAAO,CAAC,IAAI,CAACK,IAAI,CAAC;AAC7B,CAAC;AAED,MAAMD,GAAG,GAAG,SAAAA,CAAA;EAAA,SAAAE,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAIC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EAAA,OAAK,IAAId,KAAK,CAAC,GAAGY,IAAI,EAAE,KAAK,CAAC;AAAA;AAClDG,MAAM,CAACC,MAAM,CAACjB,MAAM,EAAE;EAAEQ,GAAG;EAAEH,gBAAgB;EAAEC;AAAiB,CAAC,CAAC;AAElEJ,KAAK,CAACgB,MAAM,CAACV,GAAG,GAAGL,OAAO;AAE1BD,KAAK,CAACiB,UAAU,CAACC,IAAI,CAAC;EAClBC,CAAC,EAAE,CAAC;EACJC,IAAI,EAAE,SAAAA,CAAA,EAAa;IAAA,SAAAC,KAAA,GAAAZ,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAS,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAJX,IAAI,CAAAW,KAAA,IAAAb,SAAA,CAAAa,KAAA;IAAA;IACVX,IAAI,GAAGf,MAAM,CAACe,IAAI,EAAE,KAAK,CAAC;IAC1B,IAAId,IAAI,CAACc,IAAI,CAAC,KAAK,OAAO,IAAIA,IAAI,CAACD,MAAM,KAAK,CAAC,EAAE;MAC7C,OAAO,KAAK;IAChB;EACJ;AACJ,CAAC,CAAC;AAEF,SAASJ,GAAG,EAAEH,gBAAgB,EAAEC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}