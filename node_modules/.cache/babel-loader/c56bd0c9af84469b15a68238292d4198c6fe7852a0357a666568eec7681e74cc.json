{"ast":null,"code":"import Color from '../Color.js';\nconst {\n  sqrt,\n  pow,\n  min,\n  max,\n  atan2,\n  abs,\n  cos,\n  sin,\n  exp,\n  PI\n} = Math;\nexport default function (a, b) {\n  let Kl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let Kc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  let Kh = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  // Delta E (CIE 2000)\n  // see http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CIE2000.html\n  var rad2deg = function (rad) {\n    return 360 * rad / (2 * PI);\n  };\n  var deg2rad = function (deg) {\n    return 2 * PI * deg / 360;\n  };\n  a = new Color(a);\n  b = new Color(b);\n  const [L1, a1, b1] = Array.from(a.lab());\n  const [L2, a2, b2] = Array.from(b.lab());\n  const avgL = (L1 + L2) / 2;\n  const C1 = sqrt(pow(a1, 2) + pow(b1, 2));\n  const C2 = sqrt(pow(a2, 2) + pow(b2, 2));\n  const avgC = (C1 + C2) / 2;\n  const G = 0.5 * (1 - sqrt(pow(avgC, 7) / (pow(avgC, 7) + pow(25, 7))));\n  const a1p = a1 * (1 + G);\n  const a2p = a2 * (1 + G);\n  const C1p = sqrt(pow(a1p, 2) + pow(b1, 2));\n  const C2p = sqrt(pow(a2p, 2) + pow(b2, 2));\n  const avgCp = (C1p + C2p) / 2;\n  const arctan1 = rad2deg(atan2(b1, a1p));\n  const arctan2 = rad2deg(atan2(b2, a2p));\n  const h1p = arctan1 >= 0 ? arctan1 : arctan1 + 360;\n  const h2p = arctan2 >= 0 ? arctan2 : arctan2 + 360;\n  const avgHp = abs(h1p - h2p) > 180 ? (h1p + h2p + 360) / 2 : (h1p + h2p) / 2;\n  const T = 1 - 0.17 * cos(deg2rad(avgHp - 30)) + 0.24 * cos(deg2rad(2 * avgHp)) + 0.32 * cos(deg2rad(3 * avgHp + 6)) - 0.2 * cos(deg2rad(4 * avgHp - 63));\n  let deltaHp = h2p - h1p;\n  deltaHp = abs(deltaHp) <= 180 ? deltaHp : h2p <= h1p ? deltaHp + 360 : deltaHp - 360;\n  deltaHp = 2 * sqrt(C1p * C2p) * sin(deg2rad(deltaHp) / 2);\n  const deltaL = L2 - L1;\n  const deltaCp = C2p - C1p;\n  const sl = 1 + 0.015 * pow(avgL - 50, 2) / sqrt(20 + pow(avgL - 50, 2));\n  const sc = 1 + 0.045 * avgCp;\n  const sh = 1 + 0.015 * avgCp * T;\n  const deltaTheta = 30 * exp(-pow((avgHp - 275) / 25, 2));\n  const Rc = 2 * sqrt(pow(avgCp, 7) / (pow(avgCp, 7) + pow(25, 7)));\n  const Rt = -Rc * sin(2 * deg2rad(deltaTheta));\n  const result = sqrt(pow(deltaL / (Kl * sl), 2) + pow(deltaCp / (Kc * sc), 2) + pow(deltaHp / (Kh * sh), 2) + Rt * (deltaCp / (Kc * sc)) * (deltaHp / (Kh * sh)));\n  return max(0, min(100, result));\n}","map":{"version":3,"names":["Color","sqrt","pow","min","max","atan2","abs","cos","sin","exp","PI","Math","a","b","Kl","arguments","length","undefined","Kc","Kh","rad2deg","rad","deg2rad","deg","L1","a1","b1","Array","from","lab","L2","a2","b2","avgL","C1","C2","avgC","G","a1p","a2p","C1p","C2p","avgCp","arctan1","arctan2","h1p","h2p","avgHp","T","deltaHp","deltaL","deltaCp","sl","sc","sh","deltaTheta","Rc","Rt","result"],"sources":["C:/Users/kavin/Desktop/Azure/Bit-Frontend/node_modules/chroma-js/src/utils/delta-e.js"],"sourcesContent":["import Color from '../Color.js';\nconst { sqrt, pow, min, max, atan2, abs, cos, sin, exp, PI } = Math;\n\nexport default function (a, b, Kl = 1, Kc = 1, Kh = 1) {\n    // Delta E (CIE 2000)\n    // see http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CIE2000.html\n    var rad2deg = function (rad) {\n        return (360 * rad) / (2 * PI);\n    };\n    var deg2rad = function (deg) {\n        return (2 * PI * deg) / 360;\n    };\n    a = new Color(a);\n    b = new Color(b);\n    const [L1, a1, b1] = Array.from(a.lab());\n    const [L2, a2, b2] = Array.from(b.lab());\n    const avgL = (L1 + L2) / 2;\n    const C1 = sqrt(pow(a1, 2) + pow(b1, 2));\n    const C2 = sqrt(pow(a2, 2) + pow(b2, 2));\n    const avgC = (C1 + C2) / 2;\n    const G = 0.5 * (1 - sqrt(pow(avgC, 7) / (pow(avgC, 7) + pow(25, 7))));\n    const a1p = a1 * (1 + G);\n    const a2p = a2 * (1 + G);\n    const C1p = sqrt(pow(a1p, 2) + pow(b1, 2));\n    const C2p = sqrt(pow(a2p, 2) + pow(b2, 2));\n    const avgCp = (C1p + C2p) / 2;\n    const arctan1 = rad2deg(atan2(b1, a1p));\n    const arctan2 = rad2deg(atan2(b2, a2p));\n    const h1p = arctan1 >= 0 ? arctan1 : arctan1 + 360;\n    const h2p = arctan2 >= 0 ? arctan2 : arctan2 + 360;\n    const avgHp =\n        abs(h1p - h2p) > 180 ? (h1p + h2p + 360) / 2 : (h1p + h2p) / 2;\n    const T =\n        1 -\n        0.17 * cos(deg2rad(avgHp - 30)) +\n        0.24 * cos(deg2rad(2 * avgHp)) +\n        0.32 * cos(deg2rad(3 * avgHp + 6)) -\n        0.2 * cos(deg2rad(4 * avgHp - 63));\n    let deltaHp = h2p - h1p;\n    deltaHp =\n        abs(deltaHp) <= 180\n            ? deltaHp\n            : h2p <= h1p\n              ? deltaHp + 360\n              : deltaHp - 360;\n    deltaHp = 2 * sqrt(C1p * C2p) * sin(deg2rad(deltaHp) / 2);\n    const deltaL = L2 - L1;\n    const deltaCp = C2p - C1p;\n    const sl = 1 + (0.015 * pow(avgL - 50, 2)) / sqrt(20 + pow(avgL - 50, 2));\n    const sc = 1 + 0.045 * avgCp;\n    const sh = 1 + 0.015 * avgCp * T;\n    const deltaTheta = 30 * exp(-pow((avgHp - 275) / 25, 2));\n    const Rc = 2 * sqrt(pow(avgCp, 7) / (pow(avgCp, 7) + pow(25, 7)));\n    const Rt = -Rc * sin(2 * deg2rad(deltaTheta));\n    const result = sqrt(\n        pow(deltaL / (Kl * sl), 2) +\n            pow(deltaCp / (Kc * sc), 2) +\n            pow(deltaHp / (Kh * sh), 2) +\n            Rt * (deltaCp / (Kc * sc)) * (deltaHp / (Kh * sh))\n    );\n    return max(0, min(100, result));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}