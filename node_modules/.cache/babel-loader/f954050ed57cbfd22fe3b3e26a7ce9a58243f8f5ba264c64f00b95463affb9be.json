{"ast":null,"code":"// cubehelix interpolation\n// based on D.A. Green \"A colour scheme for the display of astronomical intensity images\"\n// http://astron-soc.in/bulletin/11June/289392011.pdf\nimport { type, clip_rgb, TWOPI } from '../utils/index.js';\nimport chroma from '../chroma.js';\nconst {\n  pow,\n  sin,\n  cos\n} = Math;\nexport default function () {\n  let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;\n  let rotations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1.5;\n  let hue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let gamma = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  let lightness = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [0, 1];\n  let dh = 0,\n    dl;\n  if (type(lightness) === 'array') {\n    dl = lightness[1] - lightness[0];\n  } else {\n    dl = 0;\n    lightness = [lightness, lightness];\n  }\n  const f = function (fract) {\n    const a = TWOPI * ((start + 120) / 360 + rotations * fract);\n    const l = pow(lightness[0] + dl * fract, gamma);\n    const h = dh !== 0 ? hue[0] + fract * dh : hue;\n    const amp = h * l * (1 - l) / 2;\n    const cos_a = cos(a);\n    const sin_a = sin(a);\n    const r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);\n    const g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);\n    const b = l + amp * (+1.97294 * cos_a);\n    return chroma(clip_rgb([r * 255, g * 255, b * 255, 1]));\n  };\n  f.start = function (s) {\n    if (s == null) {\n      return start;\n    }\n    start = s;\n    return f;\n  };\n  f.rotations = function (r) {\n    if (r == null) {\n      return rotations;\n    }\n    rotations = r;\n    return f;\n  };\n  f.gamma = function (g) {\n    if (g == null) {\n      return gamma;\n    }\n    gamma = g;\n    return f;\n  };\n  f.hue = function (h) {\n    if (h == null) {\n      return hue;\n    }\n    hue = h;\n    if (type(hue) === 'array') {\n      dh = hue[1] - hue[0];\n      if (dh === 0) {\n        hue = hue[1];\n      }\n    } else {\n      dh = 0;\n    }\n    return f;\n  };\n  f.lightness = function (h) {\n    if (h == null) {\n      return lightness;\n    }\n    if (type(h) === 'array') {\n      lightness = h;\n      dl = h[1] - h[0];\n    } else {\n      lightness = [h, h];\n      dl = 0;\n    }\n    return f;\n  };\n  f.scale = () => chroma.scale(f);\n  f.hue(hue);\n  return f;\n}","map":{"version":3,"names":["type","clip_rgb","TWOPI","chroma","pow","sin","cos","Math","start","arguments","length","undefined","rotations","hue","gamma","lightness","dh","dl","f","fract","a","l","h","amp","cos_a","sin_a","r","g","b","s","scale"],"sources":["C:/Users/kavin/Desktop/Azure/Bit-Frontend/node_modules/chroma-js/src/generator/cubehelix.js"],"sourcesContent":["// cubehelix interpolation\n// based on D.A. Green \"A colour scheme for the display of astronomical intensity images\"\n// http://astron-soc.in/bulletin/11June/289392011.pdf\nimport { type, clip_rgb, TWOPI } from '../utils/index.js';\nimport chroma from '../chroma.js';\nconst { pow, sin, cos } = Math;\n\nexport default function (\n    start = 300,\n    rotations = -1.5,\n    hue = 1,\n    gamma = 1,\n    lightness = [0, 1]\n) {\n    let dh = 0,\n        dl;\n    if (type(lightness) === 'array') {\n        dl = lightness[1] - lightness[0];\n    } else {\n        dl = 0;\n        lightness = [lightness, lightness];\n    }\n    const f = function (fract) {\n        const a = TWOPI * ((start + 120) / 360 + rotations * fract);\n        const l = pow(lightness[0] + dl * fract, gamma);\n        const h = dh !== 0 ? hue[0] + fract * dh : hue;\n        const amp = (h * l * (1 - l)) / 2;\n        const cos_a = cos(a);\n        const sin_a = sin(a);\n        const r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);\n        const g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);\n        const b = l + amp * (+1.97294 * cos_a);\n        return chroma(clip_rgb([r * 255, g * 255, b * 255, 1]));\n    };\n    f.start = function (s) {\n        if (s == null) {\n            return start;\n        }\n        start = s;\n        return f;\n    };\n    f.rotations = function (r) {\n        if (r == null) {\n            return rotations;\n        }\n        rotations = r;\n        return f;\n    };\n    f.gamma = function (g) {\n        if (g == null) {\n            return gamma;\n        }\n        gamma = g;\n        return f;\n    };\n    f.hue = function (h) {\n        if (h == null) {\n            return hue;\n        }\n        hue = h;\n        if (type(hue) === 'array') {\n            dh = hue[1] - hue[0];\n            if (dh === 0) {\n                hue = hue[1];\n            }\n        } else {\n            dh = 0;\n        }\n        return f;\n    };\n    f.lightness = function (h) {\n        if (h == null) {\n            return lightness;\n        }\n        if (type(h) === 'array') {\n            lightness = h;\n            dl = h[1] - h[0];\n        } else {\n            lightness = [h, h];\n            dl = 0;\n        }\n        return f;\n    };\n    f.scale = () => chroma.scale(f);\n    f.hue(hue);\n    return f;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}